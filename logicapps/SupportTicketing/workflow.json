{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Initialize_Prompt": {
                "type": "InitializeVariable",
                "inputs": {
                    "variables": [
                        {
                            "name": "Prompt",
                            "type": "string",
                            "value": "You are an AI assistant that helps a helpdesk analyst who is triaging incident reports received as email by creating a structured JSON containing essential information about the incident using the following rules:\n- Indicate if it is a high priority issue using a \"Critical\" tag as a prefix.\n- Indicate if it is a medium priority issue using a \"Medium\" tag as a prefix.\n- Indicate if it is a low priority issue using a \"Low\" tag as a prefix.\n- Indicate if it is a non-tech issue using a \"Non-Tech\" tag as a prefix.\n- Create a one-line summary of the incident. Where possible, the summary should include a phrase that indicates the problem area.\n- Do your best to identify a category that is relevant to the incident. For example: IT outage, request-for-information, facilities etc.\n- Identify the reporter of the incident. Use \"UNKNOWN\" if you cannot identify the reporter.\n- Do your best to consolidate as plain text any error details and stack trace reported in the incident.\n- Do your best to summarise as text the technical errors reported in the incident.\n- Do your best to identify a remedial course of action.\n\nThe structured JSON output should follow these mapping rules:\n- reported date as receivedDate\n- reporter as reportedBy,\n- summary as summary,\n- category as category,\n- prefix as severity,\n- email body as details,\n- consolidated errors as errorsReported,\n- technical errors as potentialErrorSource,\n- remedial course of action as solutionProposal.\n\nReturn only the structured JSON and nothing else."
                        }
                    ]
                },
                "runAfter": {}
            },
            "Get_JSON_Completions": {
                "type": "ServiceProvider",
                "inputs": {
                    "parameters": {
                        "deploymentId": "gpt-35-turbo-16k",
                        "messages": [
                            {
                                "message": "@{variables('Prompt')}",
                                "role": "system"
                            },
                            {
                                "message": "Received: @{triggerBody()?['sent']}\nFrom: @{triggerBody()?['from']}\nSubject: @{triggerBody()?['subject']}\nContent: @{triggerBody()?['content']}\n",
                                "role": "user"
                            }
                        ],
                        "temperature": 0
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "openai",
                        "operationId": "getChatCompletions",
                        "serviceProviderId": "/serviceProviders/openai"
                    }
                },
                "runAfter": {
                    "Initialize_Prompt": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Parse_JSON_Completions": {
                "type": "ParseJson",
                "inputs": {
                    "content": "@body('Get_JSON_Completions')?['content']",
                    "schema": {
                        "properties": {
                            "body": {
                                "properties": {
                                    "content": {
                                        "type": "string"
                                    },
                                    "role": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "statusCode": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "runAfter": {
                    "Get_JSON_Completions": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Create_a_work_item": {
                "type": "ApiConnection",
                "inputs": {
                    "body": {
                        "description": "<p>@{triggerBody()?['content']}</p>",
                        "title": "@{outputs('Parse_JSON_Completions').body.summary}",
                        "userEnteredFields": {
                            "Error Severity": "@{body('Parse_JSON_Completions')?['severity']}",
                            "Error Source": "@{body('Parse_JSON_Completions')?['potentialErrorSource']}",
                            "Errors Reported": "@{body('Parse_JSON_Completions')?['errorsReported']}",
                            "Reported At": "@{body('Parse_JSON_Completions')?['receivedDate']}",
                            "Reported By": "@{body('Parse_JSON_Completions')?['reportedBy']}",
                            "Request Details": "@{triggerBody()?['content']}",
                            "Solution Proposal": "@{body('Parse_JSON_Completions')?['solutionProposal']}"
                        }
                    },
                    "host": {
                        "connection": {
                            "referenceName": "visualstudioteamservices"
                        }
                    },
                    "method": "patch",
                    "path": "/@{encodeURIComponent('AI Xplore Demo')}/_apis/wit/workitems/$Bug",
                    "queries": {
                        "account": "gbbanz"
                    }
                },
                "runAfter": {
                    "Parse_JSON_Completions": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Formatted_Response": {
                "inputs": {
                    "body": "@body('Get_JSON_Completions')?['content']",
                    "statusCode": 200
                },
                "kind": "Http",
                "runAfter": {
                    "Create_a_work_item": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Response"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "When_a_new_support_e-mail_arrives": {
                "type": "Request",
                "kind": "Http",
                "inputs": {
                    "schema": {
                        "properties": {
                            "content": {
                                "type": "string"
                            },
                            "from": {
                                "type": "string"
                            },
                            "sent": {
                                "type": "string"
                            },
                            "subject": {
                                "type": "string"
                            },
                            "to": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "method": "POST"
                },
                "operationOptions": "EnableSchemaValidation"
            }
        }
    },
    "kind": "Stateful"
}